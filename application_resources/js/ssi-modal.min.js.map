{"version":3,"names":[],"mappings":"","sources":["ssi-modal.js"],"sourcesContent":["(function (root, factory) {\r\n    //@author http://ifandelse.com/its-not-hard-making-your-library-support-amd-and-commonjs/\r\n    if (typeof module === \"object\" && module.exports) {\r\n        module.exports = factory(require(\"jquery\"));\r\n    } else {\r\n        root.ssi_modal = factory(root.jQuery);\r\n    }\r\n}(this, function ($) {\r\n    var animationSupport = checkAnimationSupport();\r\n    var openedModals = 0;\r\n    var sharedBackdrop = 0;\r\n    var byKindShare = {\r\n        stackModal: 0,\r\n        normalModal: 0\r\n    };\r\n    var uniqueId = 0;\r\n    var orphanBackdrop = false;\r\n\r\n    /**\r\n     * @constructor\r\n     * @param {object} options\r\n     * @return\r\n     */\r\n    var Ssi_modal = function (options) {\r\n        /**\r\n         * @namespace\r\n         * @property {object}  defaults               - The default options.\r\n         * @property {string}  defaults.content       - The main content of the modal.\r\n         * @property {boolean|(boolean|'shared'|'byKindShared')}  defaults.backdrop      - Enables disables the back drop. The shared option defines that the modal will open a back drop only if there is not anyone already in the dom.              * The byKindShared is similar to the shared but the already rendered backdrop must belong to the same kind of modals (normal modal,stack modal,imgBox modal) else will open new.\r\n         * @property {boolean}  defaults.outSideClose      - Close the modal when you click outside.\r\n         * @property {boolean}  defaults.bodyScroll    - Enables/disables the scroll bar of the document when the modal is opened.\r\n         * @property {boolean}  defaults.closeIcon      - Show/hide the close button\r\n         * @property {boolean}  defaults.keepContent   - Forces the modal to remove or not the content when it close.It not associated with stack modals\r\n         * @property {function}  defaults.beforeShow      - Callback when the modal opens.\r\n         * @property {function}  defaults.onShow      - Callback when the modal opens.\r\n         * @property {function}  defaults.beforeClose      - Callback when the modal closes.\r\n         * @property {function}  defaults.onClose      - Callback when the modal closes.\r\n         * @property {'right top'|'right bottom'|'left top'|'left bottom'|'center top'|'center bottom'}  defaults.position   - Sets the position of the modals.\r\n         * @property {boolean}  defaults.stack         - Make the modal a part of stack.For example toast/notification messages. Requires position.\r\n         * @property {boolean}  defaults.onClickClose  - Enables/Disables the ability to close the modal when you click in the main window.\r\n         * @property {string}  defaults.className      - Defines a class to the modal outer element.\r\n         * @property {string}  defaults.backdropClassName      - Defines a class to the backdrop element.\r\n         * @property {object}  defaults.preview      - Set the options and the state of a modal according to the preview\r\n         * @property {boolean} defaults.preview.icon - Generate an icon that allows the user to change display state\r\n         * @property {boolean} defaults.preview.hideIcons - Enables/disables the ability to hide the modal after a certain time when the modal is in fullScreen state.\r\n         * @property {'fullScreen' | 'normal'}  defaults.preview.state - The state tha the modal will have when opens.\r\n         * @property {object | 'false'}  defaults.closeAfter\r\n         * @property {number}  defaults.closeAfter.time      - After the defined time the modal will close.\r\n         * @property {boolean}  defaults.closeAfter.displayTime      - Display the in a span with class=\"ssi-displayTime\" that you must set. In example <span class=\"ssi-displayTime\"></span> .\r\n         * @property {boolean}  defaults.closeAfter.resetOnHover      -Reset the time that modal will close.\r\n\r\n         * @property {object}   defaults.iframe      - Options for iframe.\r\n         * @property {boolean}  defaults.iframe.allowFullScreen      - The default treasure.\r\n         * @property {string}   defaults.iframe.className      - Set a\r\n         * @property {boolean}  defaults.center      - Element centering.Not associated with positioned modals\r\n         * @property {boolean || string}  defaults.animation      - Enables/disables animations if you set a string all animation type will be set to that sting.\r\n         * @property {object || string || boolean}  defaults.modalAnimation      - Set the animations for the modal window.\r\n         * @property {string || boolean}  defaults.modalAnimation.show      - The animation tha start when the modal opens.\r\n         * @property {string || 'boolean}  defaults.modalAnimation.hide      - The animation tha start when the modal closes.\r\n         * @property {boolean}  defaults.backdropAnimation      - Set the animations for modal the back drop.\r\n         * @property {string || boolean}  defaults.backdropAnimation.show      - The animation tha start when the backdrop appears.\r\n         * @property {string || 'boolean}  defaults.backdropAnimation.hide      - The animation tha start when the modal closes.\r\n         * @property {Object[]}  defaults.buttons      - The buttons of modal.\r\n         * @property {'button' || 'link'}  defaults.buttons.type      - The type of button.\r\n         * @property {keycode}  defaults.buttons.keyPres      - Registers a keypress event  that will trigger the button's click method.\r\n         * @property {boolean}  defaults.buttons.className    - Defines a class to the button element.\r\n         * @property {number||false}  defaults.buttons.enableAfter      - Disables the button.if set a number the button will be enable after that time in seconds.\r\n         * @property {string}  defaults.buttons.id      - Defines an id to the button element.\r\n         * @property {string}  defaults.buttons.label      - The text of the button.\r\n         * @property {object || string || boolean}  defaults.buttons.modalAnimation      - Changes the animations of the modal.\r\n         * @property {object}  defaults.buttons.modalAnimation.show      - If you set this the next modal will open with this animation.\r\n         * @property {object}  defaults.buttons.modalAnimation.hide      - It changes the current modal hide animation.\r\n         * @property {object || string || boolean}  defaults.buttons.backdropAnimation      - Changes the animations of the backdrop.\r\n         * @property {object}  defaults.buttons.backdropAnimation.show      - If you set this the next backdrop will open with this animation.\r\n         * @property {object}  defaults.buttons.backdropAnimation.hide      - It changes the current backdrop hide animation.\r\n         * @property {boolean}  defaults.iconButtons      - Register a new icon in the top of the modal( where the x button is).You can modify it only with css using content and background properties.\r\n         * @property {boolean}  defaults.iconButtons.className      - Defines a class name to the element.\r\n         * @property {boolean}  defaults.iconButtons.method      - The function that will be fired when you press the icons.This function has access to the event object and the modal's object (ie function(event,modal){})\r\n         * @property {boolean}  defaults.title      - The title of the modal.\r\n         * @property {string}  defaults.sizeClass      - Defines the size of the modal.\r\n         * @property {boolean}  defaults.fixedHeight      - If modal height is bigger than the screen the height of modal will be fixed and will fit the screen also the content will be scrollable.\r\n         * @property {boolean}  defaults.fitScreen      - The modal min-height will be the height of screen.\r\n         * @property {boolean}  defaults.navigation      - Enables/disables the navigation of imgBox.\r\n         */\r\n\r\n        /**\r\n         * The unique id number of modal.\r\n         * @type {number}\r\n         */\r\n\r\n        this.numberId = uniqueId;\r\n        if (options.stack) {\r\n            this.pluginName = 'stackModal';\r\n        } else {\r\n            this.pluginName = 'normalModal';\r\n        }\r\n        /**\r\n         * The id of the backdrop.\r\n         * @type {string}\r\n         */\r\n        this.backdropId = '';\r\n        this.showbd = true;\r\n        this.setOptions(options);\r\n    };\r\n    Ssi_modal.prototype.setOptions = function (options, value) {\r\n        if (typeof options === 'object') {\r\n            var defaults = {\r\n                content: '',\r\n                bodyScroll: false,\r\n                keepContent: false,\r\n                position: '',\r\n                backdrop: true,\r\n                stack: false,\r\n                onClickClose: false,\r\n                bodyElement: false,\r\n                className: '',\r\n                backdropClassName: '',\r\n                preview: {\r\n                    icon: false,\r\n                    hideIcons: false,\r\n                    state: 'normal'//full\r\n                },\r\n                closeAfter: false, // time: 4, displayTime:false, resetOnHover:true }\r\n                outSideClose: true,\r\n                onClose: '',\r\n                onShow: '',\r\n                beforeClose: '',\r\n                beforeShow: '',\r\n                iframe: {//{className,allowfullscreen}\r\n                    allowFullScreen: true,\r\n                    className: ''\r\n                },\r\n                center: false,\r\n                closeIcon: true,\r\n                navigation: false,\r\n                sizeClass: 'medium',\r\n                animation: false,\r\n                modalAnimation: undefined,//{show:'',hide:''}\r\n                backdropAnimation: undefined,//{show:'',hide:''}\r\n                animationSpeed: 300,\r\n                buttons: [], //[{className: 'btn btn-danger', enableAfter:3, id: '', label: 'Open', modalReverseAnimation:true backdropReverseAnimation:true closeAfter:{ clearTimeOut:true, keepContent:true, method: function(){ } } ]\r\n                iconButtons: [],//[className:'',method:function(){}]\r\n                title: '',\r\n                fixedHeight: false,\r\n                fitScreen: false\r\n            };\r\n            var modalObj = this;\r\n            this.options = $.extend(true, defaults, options);\r\n            this.options.iconButtons = toArray(this.options.iconButtons);\r\n            if (this.options.preview.icon) {\r\n                this.options.iconButtons.push({\r\n                    className: 'ssi-displayIcon', method: function () {\r\n                        modalObj.changePreviewState();\r\n                    }\r\n                })\r\n            }\r\n            if (this.options.closeIcon) {\r\n                this.options.iconButtons.push({\r\n                    className: 'ssi-closeIcon', method: function () {\r\n                        modalObj.close();\r\n                    }\r\n                })\r\n            }\r\n            setAnimations(this);\r\n        } else {\r\n            this.options[options] = value;\r\n            if (options === 'animation' || 'modalAnimation' || 'backdropAnimation') {\r\n                setAnimations(this);\r\n            }\r\n        }\r\n        return this;\r\n    };\r\n    /**\r\n     * Initialize the modal and backdrop and expose them to the DOM\r\n     * @returns {Ssi_modal}\r\n     */\r\n    Ssi_modal.prototype.init = function () {\r\n        if (this.options.backdrop)\r\n            this.backdropInit();\r\n        this.modalInit();\r\n        uniqueId++;\r\n        return this;\r\n    };\r\n\r\n    /**\r\n     * Returns the content element of the modal.\r\n     * @returns {JQuery}\r\n     */\r\n    Ssi_modal.prototype.get$content = function () {\r\n        return this.get$modal().find('#ssi-modalContent');\r\n    };\r\n    //returns the outer element of the modal (ie if we use stack modals will return the window object else will return the modalOuter)\r\n    /**\r\n     * Returns the modal element of the modal.\r\n     * @returns {JQuery}\r\n     */\r\n    Ssi_modal.prototype.get$modal = function (id) {\r\n        id = id || this.modalId;\r\n        return this.$modal || $('#' + id);\r\n    };\r\n    /**\r\n     * Returns the title element of the modal.\r\n     * @returns {JQuery}\r\n     */\r\n    Ssi_modal.prototype.get$title = function () {\r\n        return this.get$modal().find('#ssi-modalTitle');\r\n    };\r\n    Ssi_modal.prototype.destroyTitle = function () {\r\n        this.get$title().remove();\r\n        this.options.title = '';\r\n        return this;\r\n    };\r\n    Ssi_modal.prototype.destroyContent = function () {\r\n        this.get$content().remove();\r\n        this.options.content = '';\r\n        return this;\r\n    };\r\n    Ssi_modal.prototype.destroyButtons = function (type) {\r\n        this.get$buttons(type).remove();\r\n        this.options.buttons = [];\r\n        return this;\r\n    };\r\n    Ssi_modal.prototype.destroyIcons = function () {\r\n        this.get$icons().remove();\r\n        this.options.icons = [];\r\n        return this;\r\n    };\r\n\r\n    /**\r\n     * Returns the title icons of the modal.\r\n     * @returns {JQuery}\r\n     */\r\n    Ssi_modal.prototype.get$icons = function () {\r\n        return this.get$modal().find('.ssi-topIcons');\r\n    };\r\n\r\n    /**\r\n     * Returns the buttons element of the modal.\r\n     * @returns {JQuery}\r\n     */\r\n    Ssi_modal.prototype.get$buttons = function (type) {\r\n        type = type || 'buttons';\r\n        return this.get$modal().find('#ssi-' + type);\r\n    };\r\n    /**\r\n     * Returns the window element of the modal.\r\n     * @returns {JQuery}\r\n     */\r\n    Ssi_modal.prototype.get$window = function () {\r\n        return this.get$modal().find('#ssi-modalWindow');\r\n    };\r\n\r\n    /**\r\n     * Returns the wrapper element of the modal.\r\n     * @returns {JQuery}\r\n     */\r\n    Ssi_modal.prototype.get$wrapper = function () {\r\n        if (this.options.stack) {\r\n            return this.get$modal().parent();\r\n        }\r\n        return this.get$modal().find('#ssi-modalWrapper');\r\n    };\r\n    //returns the Outer element\r\n    /**\r\n     * Returns the outer element of the modal.\r\n     * @returns {JQuery}\r\n     */\r\n    //returns the backdrop element\r\n    /**\r\n     * Returns the backdrop element of the modal.\r\n     * @returns {JQuery}\r\n     */\r\n    Ssi_modal.prototype.get$backdrop = function () {\r\n        return this.$backdrop || $('#' + this.backdropId);\r\n    };\r\n\r\n    var time = null;\r\n\r\n    //get/exit full screen state\r\n    /**\r\n     * Changes the previe state of the modal\r\n     * @returns {Ssi_modal}\r\n     */\r\n    Ssi_modal.prototype.changePreviewState = function () {\r\n        var $modalOuter = this.get$modal();\r\n        if (this.options.preview.state === 'fullScreen') {//if the current state is full\r\n            $modalOuter.removeClass('ssi-fullScreen');//remove class\r\n            this.options.preview.state = 'normal';//set state to normal\r\n            $modalOuter.find('#ssi-modalContent').css(\"height\", \"\");\r\n            if (this.options.fixedHeight || this.options.fitScreen)\r\n                this.setModalHeight();//set height again\r\n            clearTimeout(time);\r\n            $modalOuter.off('mousemove.ssi-modal');\r\n        } else {//if current state is normal\r\n            if (this.options.preview.hideIcons) {\r\n                var $icons = $modalOuter.find('.ssi-topIcons');\r\n                if (this.options.buttons)\r\n                    var $buttons = $modalOuter.find('#ssi-buttons');//find the buttons area\r\n                $modalOuter.on('mousemove.ssi-modal', function () {//register mousemove event\r\n                    clearTimeout(time);\r\n                    $icons.fadeIn();//show the icons\r\n                    $buttons.slideDown();//and buttons\r\n                    time = setTimeout(function () {//after 2 seconds\r\n                        $buttons.slideUp();//hide them\r\n                        $icons.fadeOut()\r\n                    }, 2000)\r\n                });\r\n            }\r\n            this.setModalHeight(40, 'height');         //set the height\r\n            $modalOuter.addClass('ssi-fullScreen');\r\n            this.options.preview.state = 'fullScreen';//change state to full\r\n        }\r\n        return this;\r\n    };\r\n\r\n    Ssi_modal.prototype.setPluginName = function (name) {\r\n        this.pluginName = name;\r\n        byKindShare[name] = 0;\r\n        return this;\r\n    };\r\n\r\n    /**\r\n     *  Initialize the content element if it is necessary and registers tha content.\r\n     * @param {string} content  -The content of the element.\r\n     * @param{'html' || 'append' || 'prepend} method    -The jquery method tha will use to register the content to the modal.\r\n     * @returns {*}\r\n     */\r\n    Ssi_modal.prototype.setContent = function (content, method) {\r\n        method = method || 'html';\r\n        var $modalContent;\r\n        if (this.options.content !== true) {\r\n            $modalContent = $('<div id=\"ssi-modalContent\" class=\"ssi-modalContent ' + (this.options.fixedHeight ? 'ssi-overflow ' : '') + '\"></div>');\r\n            if (this.options.content === '') {\r\n                if (this.options.title === true) {\r\n                    this.get$title().after($modalContent)\r\n                } else {\r\n                    this.get$window().prepend($modalContent);\r\n                }\r\n                this.setModalHeight();\r\n            }\r\n            this.options.content = true;\r\n        } else {\r\n            $modalContent = this.get$content();\r\n        }\r\n        var theContent = content;\r\n        if (content instanceof $ && this.options.bodyElement === true) {\r\n            if (this.options.extendOriginalContent === true) {\r\n                var beforeClose = this.options.beforeClose;\r\n                this.options.beforeClose = function (modal) {\r\n                    var resume;\r\n                    if (typeof  beforeClose === 'function')\r\n                        resume = beforeClose(modal);\r\n                    if (resume !== false) {\r\n                        content.eq(0).after(modal.get$content().contents().unwrap().css('display', '')).remove();\r\n                    } else {\r\n                        return resume\r\n                    }\r\n\r\n                };\r\n            }\r\n\r\n            theContent = content.eq(0).clone();\r\n            if (!theContent.is(\":visible\")) {\r\n                theContent.show();\r\n            }\r\n        }\r\n        $modalContent[method](theContent);\r\n\r\n        return $modalContent\r\n    };\r\n\r\n    /**\r\n     * Initialize the buttons element if it is necessary and registers tha buttons.\r\n     * @param {object[]} buttons -The buttons that will be added to the element.\r\n     * @param {string} area -The area that we'll append the buttons.\r\n     * @returns {*}\r\n     */\r\n    Ssi_modal.prototype.setButtons = function (buttons, area) {\r\n        var $buttonsArea, fixHeight = false;\r\n        buttons = toArray(buttons);\r\n        if (area !== false) {\r\n            area = (typeof area !== 'undefined' ? $(area) : this.get$window());\r\n            $buttonsArea = area.find('#ssi-buttons');\r\n            $buttonsArea = $buttonsArea[0];\r\n        }\r\n\r\n        if (!$buttonsArea) {\r\n            $buttonsArea = $('<div id=\"ssi-buttons\" class=\"ssi-buttons\"><div  id=\"ssi-leftButtons\" class=\"ssi-leftButtons\"></div><div id=\"ssi-rightButtons\" class=\"ssi-rightButtons\"></div></div>');\r\n            if (area) {\r\n                fixHeight = true;\r\n                area.append($buttonsArea);\r\n            }\r\n\r\n            this.options.buttons = true;\r\n        }\r\n        var length = buttons.length;\r\n        var $leftArea = $buttonsArea.find('#ssi-leftButtons');\r\n        var $rightArea = $buttonsArea.find('#ssi-rightButtons');\r\n        var leftAreaArray = [];\r\n        var rightAreaArray = [];\r\n        for (var i = 0, $btn; i < length; i++) {\r\n            $btn = this.generateButton(buttons[i]);\r\n            if (buttons[i].side === 'left') {\r\n                leftAreaArray.push($btn);\r\n            } else {\r\n                rightAreaArray.push($btn);\r\n            }\r\n        }\r\n        $leftArea.append(leftAreaArray);\r\n        $rightArea.append(rightAreaArray);\r\n        if (fixHeight)this.setModalHeight();\r\n        return $buttonsArea;\r\n    };\r\n    /**\r\n     * Helps to define the animations\r\n     */\r\n    var changeAnimations = function (animations, type) {\r\n        switch (typeof animations) {\r\n            case 'boolean':\r\n                if (type === 'show') {\r\n                    animations = (animations ? 'anim ssi-fadeIn' : 'ssi-show')\r\n                } else {\r\n                    animations = (animations ? 'anim ssi-fadeOut' : 'ssi-hidden')\r\n                }\r\n                break;\r\n            case 'undefined':\r\n                if (type === 'show') {\r\n                    animations = 'ssi-show';\r\n                } else {\r\n                    animations = 'ssi-hidden';\r\n                }\r\n        }\r\n        return animations\r\n    };\r\n    /**\r\n     * Helps to define the animations\r\n     */\r\n    var setAnimations = function (modalObj) {\r\n        var modalAnim = (modalObj.options.modalAnimation || modalObj.options.animation || false);\r\n        var backdropAnim = (modalObj.options.backdropAnimation || modalObj.options.animation || false);\r\n        var inAnim,\r\n         outAnim;\r\n\r\n        inAnim = changeAnimations((typeof modalAnim.show !== 'undefined' ? modalAnim.show : modalAnim), 'show');\r\n        outAnim = changeAnimations((typeof modalAnim.hide !== 'undefined' ? modalAnim.hide : modalAnim), 'hide');\r\n        modalObj.options.modalAnimation = {\r\n            'show': inAnim,\r\n            'hide': outAnim\r\n        };\r\n\r\n        inAnim = changeAnimations((typeof backdropAnim.show !== 'undefined' ? backdropAnim.show : backdropAnim), 'show');\r\n        outAnim = changeAnimations((typeof backdropAnim.hide !== 'undefined' ? backdropAnim.hide : backdropAnim), 'hide');\r\n        modalObj.options.backdropAnimation = {\r\n            'show': inAnim,\r\n            'hide': outAnim\r\n        };\r\n        if (animationSupport === false) {\r\n            modalObj.options.modalAnimation = {\r\n                'show': (modalObj.options.modalAnimation.show !== 'ssi-show' ? 'anim ssi-fadeIn' : 'ssi-show'),\r\n                'hide': (modalObj.options.modalAnimation.hide !== 'ssi-hidden' ? 'anim ssi-fadeOut' : 'ssi-hidden')\r\n            };\r\n            modalObj.options.backdropAnimation = {\r\n                'show': (modalObj.options.backdropAnimation.show !== 'ssi-show' ? 'anim ssi-fadeIn' : 'ssi-show'),\r\n                'hide': (modalObj.options.backdropAnimation.hide !== 'ssi-hidden' ? 'anim ssi-fadeOut' : 'ssi-hidden')\r\n            };\r\n        }\r\n    };\r\n    /**\r\n     * Register events and timer for closeAfter property\r\n     * */\r\n    var setCloseAfter = function (modalObj) {\r\n        var $modal = modalObj.get$modal();\r\n        modalObj.time = setTimeout(function () {\r\n\r\n            modalObj.close();\r\n        }, (modalObj.options.closeAfter.time * 1000));\r\n        if (modalObj.options.closeAfter.displayTime && modalObj.options.title) {\r\n            var $displayTime = $modal.find('span.ssi-displayTime').html(modalObj.options.closeAfter.time);\r\n            updateTime(modalObj, $displayTime, function () {\r\n                modalObj.$displayTime.remove()\r\n            });\r\n        }\r\n        if (modalObj.options.closeAfter.resetOnHover) {\r\n            $modal.on('mouseenter.ssi-modal', function () {\r\n                clearTimeout(modalObj.time);\r\n                if ($displayTime) {\r\n                    $displayTime.html(modalObj.options.closeAfter.time);\r\n                    clearInterval(modalObj.countDown);\r\n                }\r\n            });\r\n            $modal.on('mouseleave.ssi-modal', function () {\r\n                modalObj.time = setTimeout(function () {\r\n                    modalObj.close();\r\n                }, (modalObj.options.closeAfter.time * 1000));\r\n                if (modalObj.options.closeAfter.displayTime && modalObj.options.title) {\r\n                    updateTime(modalObj, $displayTime, function () {\r\n                        $displayTime.parent().remove()\r\n                    });\r\n                }\r\n            });\r\n        }\r\n    };\r\n    /**\r\n     * Initialize the backdrop and append it to the DOM\r\n     *\r\n     * @return {JQuery}\r\n     */\r\n    Ssi_modal.prototype.backdropInit = function () {\r\n        var $backdrop;\r\n        if (typeof orphanBackdrop === 'string') {//if an orphan backdrop exists\r\n            var $orphanBackdrop = $('#' + orphanBackdrop);\r\n            this.backdropId = orphanBackdrop;//change the id to the same as the new modal\r\n            $backdrop = $orphanBackdrop.attr('class', 'ssi-backdrop ' + this.pluginName + ' ' + this.options.backdropClassName);\r\n            this.showbd = false;\r\n            orphanBackdrop = true;\r\n        } else {\r\n            $backdrop = $('<div id=\"ssi-backdrop' + this.numberId + '\" class=\"ssi-backdrop ssi-hidden ' + (this.options.backdropClassName) + ' ' + this.pluginName + '\"></div>');\r\n            if (this.options.backdrop === 'shared' || this.options.backdrop === 'byKindShared') {\r\n                var $sharedBackdrop;\r\n                if (this.options.backdrop === 'byKindShared') {\r\n                    $sharedBackdrop = $('.ssi-backdrop.ssi-openedDialog.' + this.pluginName);\r\n                } else {\r\n                    $sharedBackdrop = $('.ssi-backdrop.ssi-openedDialog');\r\n                }\r\n                if (!$sharedBackdrop[0]) {//check if backdrop already exists\r\n                    $('body').append($backdrop);//if not , append one\r\n                    this.backdropId = 'ssi-backdrop' + this.numberId;\r\n                    this.showbd = true;\r\n                } else {\r\n                    this.backdropId = $sharedBackdrop.attr('id');\r\n                    this.showbd = false;\r\n                    $backdrop = $sharedBackdrop;\r\n                }\r\n            } else if (this.options.backdrop === true) {\r\n                $('body').append($backdrop);\r\n                this.backdropId = 'ssi-backdrop' + this.numberId;\r\n                this.showbd = true;\r\n            }\r\n            this.$backdrop = $backdrop;\r\n        }\r\n        if (this.options.outSideClose && this.options.position) {//check for ie\r\n            var modal = this;\r\n            $backdrop.on('click.ssi-modal' + this.numberId, function (e) {\r\n                e.preventDefault();\r\n                modal.close();\r\n            });\r\n        }\r\n        return $backdrop;\r\n    };\r\n    /**\r\n     * Initialize the outer.\r\n     * @return {JQuery}\r\n     */\r\n    var setOuter = function (modalObj) {\r\n        return $('<div class=\"ssi-modalOuter ' + (modalObj.options.stack ? ' ssi-stack' : '' + modalObj.options.className) + (modalObj.options.center ? ' ssi-center ' : ' ') + ' ' + (modalObj.options.position ? ' ssi-modalPositioned ' + modalObj.options.position : '') + '\"></div>');\r\n\r\n    };\r\n\r\n    /**\r\n     * Initialize the wrapper.\r\n     * @return $backdrop\r\n     */\r\n    var setWrapper = function (modalObj) {\r\n        return $('<div id=\"ssi-modalWrapper\" class=\" ssi-modalWrapper ' + modalObj.options.sizeClass + '\"></div>');\r\n\r\n    };\r\n    /**\r\n     * Initialize the icons element if necessary and append the icons to the element.\r\n     * @param {object[]} icons -The icons that will  append to the icons element.\r\n     * @returns {jQuery}\r\n     */\r\n    Ssi_modal.prototype.setIcons = function (icons) {\r\n        var $icons, iconArray = [];\r\n        if (this.options.iconButtons !== true) {\r\n            $icons = $('<div class=\"ssi-topIcons\"></div>');\r\n            this.options.iconButtons = true;\r\n        } else {\r\n            $icons = this.get$icons();\r\n        }\r\n        var modalObj = this;\r\n        var iconsLength = icons.length;\r\n        for (var i = 0, icon; i < iconsLength; i++) {\r\n            icon = icons[i];\r\n            (function (icon) {\r\n                iconArray.push($('<a class=\"' + icon.className + '\"></a>')\r\n                 .click(function (e) {\r\n                     e.preventDefault();\r\n                     if (typeof icon.method === 'function') {\r\n                         $.proxy(icon.method, this)(e, modalObj);\r\n                     }\r\n                 }))\r\n            })(icon)\r\n        }\r\n\r\n        $icons.append(iconArray);\r\n        return $icons;\r\n    };\r\n    /**\r\n     * Initialize the window\r\n     * @return {jQuery}\r\n     */\r\n    var setWindow = function (modalObj) {\r\n        var $modalWindow = $('<div id=\"ssi-modalWindow\" class=\"ssi-modalWindow ' + (modalObj.options.center ? modalObj.options.sizeClass : '') + (modalObj.options.stack ? ' ' + modalObj.options.sizeClass + ' ' + modalObj.options.className + ' ' : '') + '\"></div>'),\r\n         $modalContent = '',\r\n         windowContent = [];\r\n        if (modalObj.options.content) {\r\n            $modalContent = modalObj.setContent(modalObj.options.content, 'html')\r\n        }\r\n        if (modalObj.options.title) {\r\n            windowContent.push(modalObj.setTitle(modalObj.options.title));\r\n        }\r\n        if (modalObj.options.onClickClose) {\r\n            $modalWindow.addClass('ssi-hover').click(function (e) {\r\n                var $eTarget = $(e.target);\r\n                if (!$eTarget.is('a') && !$eTarget.is('button')) {\r\n                    modalObj.close();\r\n                }\r\n            })\r\n        }\r\n        if ((modalObj.options.iconButtons).length > 0) {\r\n            windowContent.push(modalObj.setIcons(modalObj.options.iconButtons, true));\r\n        }\r\n        windowContent.push($modalContent);\r\n        if (typeof modalObj.options.buttons !== 'undefined' && !$.isEmptyObject(modalObj.options.buttons)) {\r\n            windowContent.push(modalObj.setButtons(modalObj.options.buttons, false));\r\n        }\r\n        $modalWindow.append(windowContent);\r\n        return $modalWindow;\r\n    };\r\n\r\n    /**\r\n     *Generates a button according to the options.\r\n     * @param {object} buttonOptions -The button options.\r\n     * @constructor\r\n     * @returns {jQuery}\r\n     */\r\n\r\n    Ssi_modal.prototype.generateButton = function (buttonOptions) {\r\n        var defaults = {\r\n            className: '',\r\n            enableAfter: false,\r\n            method: function () {\r\n            },\r\n            type: 'button',\r\n            focused: false,\r\n            id: '',\r\n            label: '',\r\n            modalAnimation: '',\r\n            backdropAnimation: ''\r\n        };\r\n        buttonOptions = $.extend({}, defaults, buttonOptions);\r\n        var tag = 'button', href = '', modalObj = this, resume;\r\n        if (buttonOptions.type === 'link') {//set tag type (<a> or <button>)\r\n            tag = 'a';\r\n            href = ' href=\"#\"';\r\n        }\r\n        var $btn = $('<' + tag + href + (buttonOptions.id ? ' id=\"' + buttonOptions.id + '\"' : ' ') + (buttonOptions.enableAfter ? 'disabled ' : '') + ' class=\"ssi-modalBtn ' + (buttonOptions.className || '') + '\">'\r\n         + buttonOptions.label +\r\n         '</' + tag + '>');\r\n        if (typeof buttonOptions.enableAfter === 'number') {\r\n            var $count = $('<span class=\"ssi-countDown\">' + buttonOptions.enableAfter + '</span>');\r\n            updateTime(modalObj, $count, function () {\r\n                $btn.removeClass('disabled');\r\n                $btn.removeAttr('disabled');\r\n                $count.remove();\r\n            });\r\n            $btn.append($count);\r\n        }\r\n//append button to selected object and set click event\r\n        if (buttonOptions.keyPress) {\r\n            $('body').on('keydown.ssi_modal', function (e) {\r\n                if (e.keyCode == buttonOptions.keyPress && !$btn.is(':disabled')) {\r\n                    $btn.trigger('click');\r\n                }\r\n            });\r\n        }\r\n        if (buttonOptions.focused) {\r\n            setTimeout(function () {\r\n                $btn.focus();\r\n            }, 100)\r\n        }\r\n        return $btn.click(function (e) {\r\n            e.preventDefault();\r\n            if (buttonOptions.clearTimeOut) {\r\n                clearTimeOut(modalObj);\r\n            }\r\n            if (typeof buttonOptions.method === 'function') {\r\n                resume = $.proxy(buttonOptions.method, this)(e, modalObj);\r\n            }\r\n            if (resume === false) {\r\n                return;\r\n            }\r\n            if (typeof buttonOptions.keepContent === 'boolean' && buttonOptions.keepContent !== modalObj.options.keepContent) {\r\n                modalObj.options.keepContent = buttonOptions.keepContent; // change keepContent option according to button option\r\n            }\r\n            if (buttonOptions.closeAfter) {\r\n                modalObj.close();\r\n//finally close the modal if closeAfter option is true\r\n            }\r\n        });\r\n    };\r\n    /**\r\n     * Initialize the modal and append it to the DOM\r\n     */\r\n    Ssi_modal.prototype.modalInit = function () {\r\n        var $modalWindow = setWindow(this),\r\n         modalObj = this;\r\n        if (this.options.position) {\r\n            if (this.options.stack) {\r\n                var appendAction = 'append';\r\n                if (this.options.position.indexOf('bottom') > -1) {//if we hava bottom position we want to prepend the window to appears in the top of stack\r\n                    appendAction = 'prepend';\r\n                }\r\n                var position = this.options.position.replace(\" \", '.');//change the spaces with dot to make it a class selector\r\n                var positionedElement = $('div.ssi-modalOuter.ssi-stack' + '.' + position);\r\n                if (positionedElement[0]) {//check if this element with this position exists to the dom.\r\n                    positionedElement\r\n                     .find('#ssi-modalWrapper')//if exists append the window to the dom.\r\n                     [appendAction]($modalWindow);\r\n                }\r\n                this.$modal = $modalWindow;\r\n            }\r\n        }\r\n        if (!this.options.stack || !positionedElement[0]) {//if not stack modal or the element with this position dont exist to the dom create and append one.\r\n            var wrapper = setWrapper(this);\r\n            var $modal = setOuter(this)\r\n             .append(wrapper\r\n              .append($modalWindow))\r\n             .appendTo($('body'));\r\n            if (!this.options.stack) {//if not stack give a unique id to the outer\r\n                this.$modal = $modal;\r\n                $modal.one('onShow.ssi-modal', function () {\r\n                    if (modalObj.options.outSideClose === true) {\r\n                        $modal.click(function (e) {\r\n                            if (e.target === this) {\r\n                                e.preventDefault();\r\n                                modalObj.close();\r\n                            }\r\n                        });\r\n                        wrapper.click(function (e) {\r\n                            if (e.target === this) {\r\n                                e.preventDefault();\r\n                                modalObj.close();\r\n                            }\r\n\r\n                        });\r\n                    }\r\n                })\r\n\r\n            }\r\n        }\r\n        this.modalId = 'ssi-' + this.pluginName + this.numberId;\r\n        (this.$modal).attr('id', 'ssi-' + this.pluginName + this.numberId);\r\n        (this.$modal).addClass(this.pluginName + ' ssi-modal');\r\n        this.$modal.data('ssi-modal', this).addClass('ssi-hidden');\r\n        if (typeof orphanBackdrop === 'string')this.backdropInit();\r\n        return this.$modal;\r\n    };\r\n    /**\r\n     * Appends title to the modal.\r\n     * @param {string} title\r\n     * @return $title\r\n     */\r\n    Ssi_modal.prototype.setTitle = function (title) {\r\n        var $title, fixHeight = false;\r\n        if (this.options.title !== true) {\r\n            $title = $('<div id=\"ssi-modalTitle\" class=\"ssi-modalTitle ' + (!this.options.content ? 'ssi-borderOut ' : '') + '\">' + this.options.title + '</div>');\r\n            if (this.options.title === '') {\r\n                this.get$window().prepend($title);\r\n                fixHeight = true;\r\n            }\r\n            this.options.title = true;\r\n        } else {\r\n            $title = this.get$title();\r\n        }\r\n        $title.html(title);\r\n        if (fixHeight)this.setModalHeight();\r\n        return $title;\r\n    };\r\n\r\n    Ssi_modal.prototype.showModal = function () {\r\n        var $modal = this.get$modal(),\r\n         modalObj = this;\r\n\r\n        setTimeout(function () {\r\n            $modal.trigger(\"beforeShow.ssi-modal\");//trigger show event\r\n        }, 0);\r\n        if (this.options.bodyScroll === false) {\r\n            $('body').addClass('ssi-modalOpen');//add this class to body to disable scrollbar\r\n            openedModals++;//calculate open modals\r\n        }\r\n        if (this.options.backdrop === 'shared') {\r\n            sharedBackdrop++;\r\n        } else if (this.options.backdrop === 'byKindShared') {\r\n            byKindShare[this.pluginName]++\r\n        }\r\n\r\n        $modal.addClass('ssi-openedDialog');\r\n        var callback = function () {\r\n            $(this).removeClass('ssi-hidden');\r\n            if (typeof modalObj.options.onShow === 'function') {\r\n                modalObj.options.onShow(modalObj);//execute onShow callback\r\n            }\r\n            setTimeout(function () {\r\n                $modal.trigger(\"onShow.ssi-modal\");//trigger show event);\r\n            }, 0);\r\n        };\r\n        $modal.addAnimation(this.options.modalAnimation.show, function () {\r\n            callback();\r\n        }).removeClass('ssi-hidden');\r\n        if (this.options.center) {\r\n            $modal.css('display', '');\r\n        }\r\n        if (modalObj.options.preview.state === 'fullScreen') {//if the default state is fullscreen\r\n            modalObj.options.preview.state = 'normal';\r\n            modalObj.changePreviewState();\r\n        }\r\n\r\n        this.setModalHeight();\r\n\r\n        if (typeof this.options.closeAfter.time === 'number') {\r\n            setCloseAfter(this)\r\n        }\r\n        delete this.$modal;\r\n\r\n    };\r\n\r\n    /**\r\n     * Opens the modal.\r\n     * @return {Ssi_modal}\r\n     */\r\n    Ssi_modal.prototype.showBackdrop = function () {\r\n        var modalObj = this;\r\n        var $backdrop = this.get$backdrop().addClass('ssi-openedDialog');\r\n\r\n        $backdrop.addAnimation(this.options.backdropAnimation.show).removeClass('ssi-hidden');\r\n\r\n        delete this.$backdrop;\r\n    };\r\n\r\n    Ssi_modal.prototype.show = function () {\r\n\r\n        if (typeof this.options.beforeShow === 'function') {\r\n            var resume = this.options.beforeShow(this);\r\n            if (resume === false) {\r\n                return this;\r\n            }\r\n        }\r\n\r\n        this.showModal();\r\n\r\n        if (orphanBackdrop === false && this.options.backdrop && this.showbd === true) {\r\n            this.showBackdrop();\r\n        }\r\n\r\n        return this;\r\n    };\r\n\r\n    /**\r\n     * Closes the modal\r\n     * @return {Ssi_modal}\r\n     */\r\n    Ssi_modal.prototype.destroyBackdrop = function () {\r\n        var $backdrop = this.get$backdrop(), modalObj = this;\r\n        if (this.options.keepContent !== true) {\r\n            $backdrop.off('click.ssi-modal' + this.numberId);\r\n        }\r\n        var thisS = this\r\n        var closeBack = function () {\r\n            if ((thisS.options.backdrop === true || (    (   ( thisS.options.backdrop === 'shared' && sharedBackdrop < 1) || ( thisS.options.backdrop === 'byKindShared' && byKindShare[thisS.pluginName] < 1)  ) && ( (!thisS.get$modal(thisS.modalId.replace(thisS.numberId.toString(), thisS.backdropId.replace('ssi-backdrop', '')))[0]) || thisS.backdropId.replace('ssi-backdrop', '') == thisS.numberId))  )) {//thisS maybe blow your mine\r\n                var closeBackdrop = function () {//thisS will execute when the hide animation end\r\n                    $backdrop.addClass('ssi-hidden').removeClass('ssi-openedDialog');\r\n                    $backdrop.trigger('backdropClose.ssi-modal');\r\n                    if (modalObj.options.keepContent !== true) $backdrop.remove();//remove backdrop if keepContent option is false\r\n                };\r\n                $backdrop.addAnimation(thisS.options.backdropAnimation.hide, closeBackdrop);\r\n            }\r\n            if (orphanBackdrop === thisS.backdropId) {\r\n                orphanBackdrop = false;\r\n            }\r\n        }\r\n        if (this.options.stack && this.options.outSideClose) {\r\n            setTimeout(closeBack, 10);\r\n        } else {\r\n            closeBack()\r\n        }\r\n        return this;\r\n    };\r\n\r\n    Ssi_modal.prototype.destroyModal = function () {\r\n        var $modal = this.get$modal(),\r\n         modalObj = this;\r\n        $modal.off('.ssi_modal');\r\n        $modal.trigger(\"beforeClose.ssi-modal\"); //trigger close event\r\n        if (this.options.backdrop === 'shared') {\r\n            sharedBackdrop--;\r\n        } else if (this.options.backdrop === 'byKindShared') {\r\n            byKindShare[this.pluginName]--;\r\n        }\r\n\r\n        if ($modal.hasClass('ssi-openedDialog')) {\r\n            $modal.removeClass('ssi-openedDialog');\r\n            if (this.options.bodyScroll === false) {\r\n                openedModals--;// downgrade opened modals\r\n            }\r\n        }\r\n\r\n        var closeModal = function () {//this will execute as a callback when the hide animation end\r\n            $modal.addClass('ssi-hidden');\r\n            if (modalObj.options.stack) {\r\n                $modal.addClass('ssi-smoothSlide').slideUp('500', function () {\r\n                    $modal.removeClass('ssi-smoothSlide');\r\n                    $modal.trigger(\"onClose.ssi-modal\"); //trigger close event\r\n                    if (modalObj.options.keepContent !== true) $modal.remove();//will remove modal from DOM if keepContent option is false\r\n\r\n                });\r\n            } else {\r\n                $modal.trigger(\"onClose.ssi-modal\"); //trigger close event\r\n                if (modalObj.options.keepContent !== true)$modal.remove();//will remove modal from DOM if keepContent option is false\r\n            }\r\n            if (typeof modalObj.options.onClose === 'function')\r\n                modalObj.options.onClose(modalObj);//execute onClose callback\r\n\r\n            if (modalObj.options.keepContent !== true) {\r\n                $modal.off('.ssi-modal').find('#ssi-modalWrapper').off('.ssi-modal');\r\n            }\r\n        };\r\n\r\n        //close the modal window\r\n        $modal.addAnimation(this.options.modalAnimation.hide, closeModal);\r\n        this.options.icons = [];\r\n        this.options.buttons = [];\r\n        this.options.content = '';\r\n        this.options.title = '';\r\n        orphanBackdrop = this.backdropId;\r\n        return this;\r\n    };\r\n\r\n    Ssi_modal.prototype.close = function () {\r\n        if (typeof this.options.beforeClose === 'function') {\r\n            var resume = this.options.beforeClose(this);\r\n            if (resume === false) {\r\n                return this;\r\n            }\r\n        }\r\n        var $body = $('body');\r\n        $body.off('.ssi_modal');\r\n\r\n        this.destroyModal();\r\n        this.destroyBackdrop();\r\n\r\n        if (openedModals < 1) {//if no more modals left remove class from body and off events\r\n            $body.removeClass('ssi-modalOpen');\r\n        }\r\n        clearTimeOut(this);\r\n        return this;\r\n    };\r\n\r\n//calculates modals height\r\n    /**\r\n     * Sets the height of the modal\r\n     * @method setModalHeight\r\n     * @param {number} offset -Add more offset to the modal.\r\n     * @param {'height'||'min-height'||'max-height'} option -Force the function to excecute.\r\n     * @param {object} $content -The $content object of modal.\r\n     * @return\r\n     */\r\n    Ssi_modal.prototype.setModalHeight = function (offset, option) {\r\n        if (!this.options.fitScreen && !this.options.fixedHeight && !option) {\r\n            return this;\r\n        }\r\n\r\n        if (typeof offset !== 'number') {\r\n            offset = 100;\r\n        }\r\n\r\n        var $content = this.get$content();\r\n        var windowHeight = $(window).height(),\r\n         btnsHeight = 0, titleHeight = 0;\r\n        if (this.options.buttons)\r\n            btnsHeight = $content.next().innerHeight();\r\n        if (this.options.title)\r\n            titleHeight = this.get$title().innerHeight();\r\n        var totalHeight = btnsHeight + titleHeight + offset,\r\n         optionsOffset = 0;\r\n        if (!option) {\r\n\r\n            if (this.options.fitScreen && this.options.fixedHeight) {\r\n                if (typeof this.options.fitScreen === 'number') {\r\n                    optionsOffset = Math.abs((this.options.fitScreen + this.options.fixedHeight) / 2 - offset);\r\n                }\r\n                $content.css('height', windowHeight - totalHeight - optionsOffset); //add more margin down\r\n            } else {\r\n                if (this.options.fitScreen) {\r\n                    if (typeof this.options.fitScreen === 'number') {\r\n                        optionsOffset = Math.abs(this.options.fitScreen - offset);\r\n                    }\r\n                    $content.css('min-height', windowHeight - totalHeight - optionsOffset); //add more margin down\r\n                }\r\n                if (this.options.fixedHeight) {\r\n                    optionsOffset = 0;\r\n                    if (typeof this.options.fixedHeight === 'number') {\r\n                        optionsOffset = Math.abs(this.options.fixedHeight - offset);\r\n                    }\r\n                    $content.css('max-height', (windowHeight - totalHeight - optionsOffset)); //add more margin down\r\n                }\r\n            }\r\n\r\n        } else if (typeof option === 'string') {\r\n            $content.css(option, (windowHeight - totalHeight)); //add more margin down\r\n        }\r\n        return totalHeight;\r\n    };\r\n    /**\r\n     * Clears the timeout\r\n     */\r\n    var clearTimeOut = function (modalObj) {\r\n        clearTimeout(modalObj.time);\r\n        modalObj.time = null;\r\n        clearInterval(modalObj.countDown);\r\n\r\n    };\r\n\r\n    /**\r\n     * Updates the text of an element\r\n     * @param {Ssi_modal} modalObj\r\n     * @param {JQuery} $target -the element that will be updated\r\n     * @param {function} callback -The function that will execute when the time expires;\r\n     */\r\n    var updateTime = function (modalObj, $target, callback) {\r\n        var doUpdate = function () {\r\n            var count = parseInt($target.html());\r\n            if ((count - 1) !== 0) {\r\n                $target.html(count - 1);\r\n            } else {\r\n                if (callback)\r\n                    callback();\r\n                clearInterval(modalObj.countDown);\r\n            }\r\n        };\r\n        modalObj.countDown = setInterval(doUpdate, 1000);\r\n    };\r\n\r\n//--------------------------------------------------------------------------------------------------------------\r\n\r\n    /**\r\n     * Creates a new modal window.\r\n     * @param {object} options -The options of the modal\r\n     * @param {string} element -The id or class name om the element that trigger the modal.\r\n     * @return {Ssi_modal}\r\n     */\r\n\r\n    /**\r\n     * @author http://stackoverflow.com/a/8015864/4801797\r\n     */\r\n    $.fn.extend({\r\n        hasClasses: function (selectors) {\r\n            var self = this;\r\n            for (var i in selectors) {\r\n                if ($(self).hasClass(selectors[i]))\r\n                    return true;\r\n            }\r\n            return false;\r\n        }\r\n    });\r\n\r\n    var ssi_modal = {\r\n        checkElement: function (element) {\r\n            var $element = $(element);\r\n            if ($element[0]) {\r\n                var data = $element.data('ssi-modal');//then check if object exists in data-ssi-modal\r\n                if (data) {\r\n                    if (!$('#' + data.modalId)[0]) {// if data exists but no modal exists(probably removed by button)\r\n                        $element.data('ssi-modal', '');//then remove data-ssi-modal\r\n                        return false\r\n                    }\r\n                }\r\n            }\r\n            if (data) {\r\n                return data\r\n            } else {\r\n                return false;\r\n            }\r\n        },\r\n        createObject: function (options, element) {\r\n            var $element, obj, data;\r\n            if (typeof element !== 'undefined') { //this means that we use jquery method(see line 406)\r\n                $element = $(element);\r\n                data = $element.data('ssi-modal');//then check if object exists in data-ssi-modal\r\n            } else {\r\n                options.keepContent = false;\r\n            }\r\n            if (data) {\r\n                obj = data\r\n            } else {\r\n                obj = new Ssi_modal(options);\r\n                if (typeof element !== 'undefined') {\r\n                    $element.data('ssi-modal', obj);// save the object to the target\r\n                }\r\n            }\r\n            return obj;\r\n        },\r\n        /**\r\n         * Opens the modal\r\n         * @param {object} options -The options of the modal.\r\n         * @param {string} element -The id or class name om the element that trigger the modal.\r\n         *@returns {Ssi_modal}\r\n         */\r\n        show: function (options, element) {\r\n            var obj = false;\r\n            if (element) {\r\n                obj = this.checkElement(element);\r\n            }\r\n            if (obj === false) {\r\n                return this.createObject(options, element).init().show();\r\n            } else if (typeof obj === 'object') {\r\n                return obj.show();\r\n            }\r\n\r\n        },\r\n        /**\r\n         * Closes the targeted modal or the very top\r\n         * @param {string} $target\r\n         */\r\n        close: function ($target) {\r\n            if (!$target) {\r\n                var modal = $('.ssi-modalOuter');\r\n                $target = modal.eq(modal.length - 1);\r\n            }\r\n            return $target.data('ssi-modal')\r\n             .close();\r\n        },\r\n        /**\r\n         * Closes all or a group of modals.\r\n         * @param {'normalModal'||'pluginName'} group\r\n         * @param {className} except -The modal with this class will not close\r\n         */\r\n        proto: Ssi_modal.prototype,\r\n        closeAll: function (group, except) {//close all opened modal with the right order and all callbacks will execute normally\r\n            except = toArray(except);\r\n            var $activeModals;\r\n            var groupVarType = typeof group;\r\n            if ((groupVarType === 'string' && group !== '') || groupVarType === 'array') {\r\n                group = toArray(group);\r\n                var groupLength = group.length;\r\n                for (var i = 0; i < groupLength; i++) {\r\n                    $activeModals = $('.ssi-modal.ssi-openedDialog.' + group[i]);\r\n                    close($activeModals);\r\n                }\r\n            } else {\r\n                $activeModals = $('.ssi-modal.ssi-openedDialog');\r\n                close($activeModals);\r\n            }\r\n\r\n            function close($modals) {\r\n                var modalsLength = $modals.length;\r\n                for (var i = modalsLength - 1; i >= 0; i--) {\r\n                    var $modal = $modals.eq(i);\r\n                    if (!$modal.hasClasses(except)) {\r\n                        $modal.data('ssi-modal').close();\r\n                    }\r\n\r\n                }\r\n            }\r\n        },\r\n        /**\r\n         * Remove immediately all the modals from the dom. No modal callbacks will execute.\r\n         * @param {function} callback -Just a callback\r\n         */\r\n        removeAll: function () {//close all opened modal no callbacks and no keepContent will execute you can determine one callback\r\n            $('.ssi-modalOuter').addClass('ssi-hidden').remove();\r\n            $('.ssi-backdrop').addClass('ssi-hidden').remove();\r\n            $('body').removeClass('ssi-modalOpen');\r\n            openedModals = 0;\r\n            sharedBackdrop = 0;\r\n            byKindShare = {\r\n                stackModal: 0,\r\n                normalModal: 0\r\n            };\r\n            uniqueId = 0;\r\n        }\r\n    };\r\n\r\n//-----------------------------Start of confirm plugin------------------------------------------------------------------\r\n\r\n    ssi_modal.dialog = function (options, method) {\r\n        var defaults = {\r\n            sizeClass: 'dialog',\r\n            okBtn: {\r\n                className: '',\r\n                label: 'Ok'\r\n            },\r\n            title: '',\r\n            closeIcon: false,\r\n            outSideClose: false\r\n        };\r\n        options.okBtn = $.extend({}, defaults.okBtn, options.okBtn);\r\n        options = $.extend({}, defaults, options);\r\n        options.buttons = [{\r\n            className: options.okBtn.className,\r\n            label: options.okBtn.label,\r\n            closeAfter: true,\r\n            method: method\r\n        }];\r\n        return new Ssi_modal(options).init().show();\r\n    };\r\n\r\n    //-----------------------------End of dialog plugin------------------------------------------------------------------\r\n\r\n//-----------------------------Start of confirm plugin------------------------------------------------------------------\r\n\r\n    ssi_modal.confirm = function (options, method) {\r\n        var defaults = {\r\n            okBtn: {\r\n                className: '',\r\n                label: 'Ok'\r\n            },\r\n            cancelBtn: {\r\n                className: '',\r\n                label: 'Cancel'\r\n            },\r\n            closeIcon: false,\r\n            sizeClass: 'dialog',\r\n            title: '',\r\n\r\n            outSideClose: false\r\n        };\r\n        options.okBtn = $.extend({}, defaults.okBtn, options.okBtn);\r\n        options.cancelBtn = $.extend({}, defaults.cancelBtn, options.cancelBtn);\r\n        options = $.extend({}, defaults, options);\r\n        options.buttons = [{\r\n            className: options.okBtn.className,\r\n            label: options.okBtn.label,\r\n            closeAfter: true,\r\n            method: function (e, modal) {\r\n                if (typeof method === 'function')\r\n                    method(true, e, modal);\r\n            }\r\n        }, {\r\n            className: options.cancelBtn.className,\r\n            label: options.cancelBtn.label,\r\n            closeAfter: true,\r\n            method: function (e, modal) {\r\n                if (typeof method === 'function')\r\n                    method(false, e, modal);\r\n            }\r\n        }];\r\n        return new Ssi_modal(options).init().show();\r\n    };\r\n\r\n    //--------------------------------End of confirm plugin--------------------------------------------------\r\n\r\n//-----------------------------Start of imgBox plugin------------------------------------------------------------------\r\n    function isDataURL(s) {\r\n        return !!s.match(isDataURL.regex);\r\n    }\r\n\r\n    isDataURL.regex = /^\\s*data:([a-z]+\\/[a-z0-9\\-\\+]+(;[a-z\\-]+\\=[a-z0-9\\-]+)?)?(;base64)?,[a-z0-9\\!\\$\\&\\'\\,\\(\\)\\*\\+\\,\\;\\=\\-\\.\\_\\~\\:\\@\\/\\?\\%\\s]*\\s*$/i;\r\n\r\n    var imgBoxOptions = {'ssi-mainOption': {}};//this will hold the imgbox options when will call ssi_modal.imgBox function\r\n    ssi_modal.imgBox = function (options, group) {//set options for the image box\r\n        group = group || 'ssi-mainOption';\r\n        imgBoxOptions[group] = $.extend({}, imgBoxOptions['ssi-mainOption'], options);\r\n    };\r\n\r\n    var currentIndex,\r\n     $elementsLength,\r\n     $eventTarget;\r\n\r\n    /**\r\n     *  Navigates to the next/previous image.\r\n     * @param {'next' || 'prev'} direction -The navigation direction\r\n     * @returns {Ssi_modal}\r\n     */\r\n    ssi_modal.proto.navigate = function (direction) {\r\n        var $groupElements = $('a[data-ssi_imgGroup=\"' + $eventTarget.attr('data-ssi_imgGroup') + '\"]');\r\n        if (!currentIndex)currentIndex = $groupElements.index($eventTarget);\r\n        if (!$elementsLength)$elementsLength = $groupElements.length;\r\n        if ((direction === 'next' && currentIndex + 1 >= $elementsLength) || (direction === 'prev' && currentIndex < 0)) {\r\n            return this;\r\n        }\r\n\r\n        this.destroyModal();\r\n        if (direction === 'next') {//next image\r\n            currentIndex++;\r\n        } else if (direction === 'prev') {//previous image\r\n            currentIndex--;\r\n        }\r\n        $groupElements.eq(currentIndex).trigger('click.ssi-imgBox');\r\n        return this;\r\n    };\r\n\r\n    ssi_modal.imgBox.show = function (url, options) {\r\n        var defaults = {//set defaults\r\n            backdrop: 'byKindShared',\r\n            fixedHeight: true,\r\n            navigation: true,\r\n            closeIcon: true,\r\n            title: false,\r\n            allowIframe:true,\r\n            hideImgButtons: true\r\n        };\r\n        options = $.extend(true, defaults, options);\r\n        $.extend(options, {\r\n            img: true,\r\n            content: '<div class=\"ssi-loader\"></div>',\r\n            sizeClass: ''\r\n        });\r\n        var imgBox = ssi_modal.createObject(options)\r\n         .setPluginName('imgBox');\r\n        imgBox.imgUrl = url;\r\n        imgBox.imgTitle = options.title;\r\n        imgBox.init();\r\n        if (options.title) {\r\n            imgBox.get$icons().addClass('inTitle');\r\n        }\r\n\r\n        imgBox.show();\r\n        setImg(imgBox, url);\r\n\r\n    };\r\n    $('body').on('click.ssi-imgBox', 'a.ssi-imgBox', function (e) {//click event handler for all links with ssi-imgbox class\r\n        e.preventDefault();\r\n        e.stopPropagation();\r\n        $eventTarget = $(e.currentTarget);\r\n        var group = $eventTarget.attr('data-ssi_imgGroup') || 'ssi-mainOption';//get the options of the right group\r\n        var options = imgBoxOptions[group] || imgBoxOptions['ssi-mainOption'];\r\n        var url = $eventTarget.attr('href');\r\n        if (options.imgButtons !== '' && !$.isEmptyObject(options.imgButtons)) {\r\n            for (var i = 0; i < options.imgButtons.length; i++) { //check if the current button is in the exclude list\r\n                if (options.imgButtons[i].exclude) {\r\n                    var btnClass = options.imgButtons[i].exclude.split(',');\r\n                    for (var y = 0; y < btnClass.length; y++) {\r\n                        if ($eventTarget.hasClass(btnClass[y])) {\r\n                            options.imgButtons.splice(i, 1);\r\n                            break;\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        if (options.title) {\r\n            if (options.title === true) {\r\n                options.title = $eventTarget.attr('title');//get title of the target\r\n            }\r\n        }\r\n        ssi_modal.imgBox.show(url, options, $eventTarget);\r\n    });\r\n\r\n    function setImg(imgBox, url) {\r\n\r\n        var $modalWrapper = imgBox.get$wrapper(),\r\n         $content = $modalWrapper.find('#ssi-modalContent');\r\n        if (!url || url == '#') {\r\n            var alt = ($eventTarget ? $eventTarget.attr('data-alt') : '');\r\n            $img = '<h3>Image not found</h3><br>' + (typeof alt !== 'undefined' ? '<h4>' + alt + '</h4>' : '');\r\n            placeImg(true);\r\n            return;\r\n        }\r\n        var interval,\r\n         startInterval,\r\n         supportsNatural = (\"naturalWidth\" in (new Image())),\r\n         windowHeight = $(window).height(),\r\n         windowWidth = $(window).width(),\r\n         $img = [''],\r\n         i = 0;\r\n        if (imgBox.options.navigation && $eventTarget) {\r\n            $content.append(setImgNavigation);\r\n        }\r\n        var imgTypes = [\r\n            'jpg',\r\n            'jpeg',\r\n            'png',\r\n            'gif',\r\n            'bmp'\r\n        ];\r\n        if (!imgBox.options.allowIframe||$.inArray(url.split('.').pop().toLowerCase(), imgTypes) !== -1||isDataURL(url)) {\r\n            $img = $('<img src=\"' + url + '\" class=\"ssi-modalImg\"/>')\r\n             .on('load', function () {\r\n                 if (!supportsNatural) {\r\n                     var ghost = new Image();\r\n                     ghost.src = $img.attr('src');\r\n                     var width = ghost.width;\r\n                     var height = ghost.height;\r\n                     onHasSize(width, height);\r\n                 }\r\n             })\r\n             .error(function () {\r\n                 var alt = ($eventTarget ? $eventTarget.attr('data-alt') : '');\r\n                 $img = '<h3>Image not found</h3><br>' + (typeof alt !== 'undefined' ? '<h4>' + alt + '</h4>' : '');\r\n                 placeImg(true);\r\n             });\r\n            checkSize();\r\n            if (startInterval) {\r\n                interval = setInterval(function () {\r\n                    $modalWrapper.addClass('ssi-imgBorder');\r\n                    checkSize();\r\n                    i++\r\n                }, 50);\r\n            }\r\n\r\n        } else {\r\n            if (typeof imgBox.options.iframe.allowFullScreen !== 'boolean') {\r\n                imgBox.options.iframe.allowFullScreen = true;\r\n            }\r\n            imgBox.options.iframe.className = imgBox.options.iframe.className || '';\r\n            $img = $('<iframe src=\"' + url + '\" frameborder=\"0\" ' + (imgBox.options.iframe.allowFullScreen ? 'allowfullscreen' : '') + '></iframe>');\r\n\r\n            if (imgBox.options.center) {\r\n                $modalWrapper.addClass('ssi-iframe ').find('#ssi-modalWindow' + imgBox.numberId).addClass(imgBox.options.iframe.className);\r\n            } else {\r\n                $modalWrapper.addClass('ssi-iframe ' + imgBox.options.iframe.className);\r\n            }\r\n            placeImg();\r\n        }\r\n\r\n        function setImgNavigation() {\r\n            var $groupElements = $('a[data-ssi_imgGroup=\"' + $eventTarget.attr('data-ssi_imgGroup') + '\"]');\r\n            if (!$groupElements.length)return;\r\n            var index = $groupElements.index($eventTarget),\r\n             $elementLength = $groupElements.length;\r\n            if (index + 1 >= $elementLength && index < 1)return;\r\n            var $nav = $('<div class=\"ssi-modalNavigation\"></divid>').mouseover(function () {\r\n                 $nav.addClass('ssi-navFadeIn');\r\n             }).mouseleave(function () {\r\n                 $nav.removeClass('ssi-navFadeIn');\r\n             }),\r\n             $next = $('<div class=\"ssi-modalNext ' + (index + 1 >= $elementLength ? 'ssi-hidden' : '') + '\"><span></span></div>'),\r\n             $prev = $('<div class=\"ssi-modalPrev ' + (index < 1 ? 'ssi-hidden' : '') + '\"><span></span></div>');\r\n            $nav.append($next, $prev);\r\n            imgBox.get$backdrop().one('backdropClose.ssi-modal', function () {\r\n\r\n                $elementsLength = '';\r\n                currentIndex = '';\r\n            });\r\n            imgBox.get$modal().one('beforeClose.ssi-modal', function () {\r\n                $nav.remove();\r\n            }).one('onShow.ssi-modal', function () {\r\n                $next.one('click', function (e) {\r\n                    e.preventDefault();\r\n                    imgBox.navigate('next');\r\n                    $(this).off('click.ssi_modal');\r\n                });\r\n                $prev.one('click', function (e) {\r\n                    e.preventDefault();\r\n                    imgBox.navigate('prev');\r\n                    $(this).off('click.ssi_modal');\r\n                });\r\n            });\r\n\r\n            return $nav;\r\n        }\r\n\r\n        function placeImg(error) {\r\n            $content.find('.ssi-loader').remove();\r\n            var content = [];\r\n            if (!error && imgBox.options.imgButtons !== '' && !$.isEmptyObject(imgBox.options.imgButtons)) {\r\n                var imgButtons = imgBox.setButtons(imgBox.options.imgButtons, imgBox.get$content()).addClass('ssi-imgButtons');\r\n                if (imgBox.options.hideImgButtons === true) {\r\n                    imgButtons.addClass('ssi-navFade ssi-navFadeOut');\r\n                    imgBox.get$wrapper().mouseover(function () {\r\n                        imgButtons.addClass('ssi-navFadeIn');\r\n                    }).mouseleave(function () {\r\n                        imgButtons.removeClass('ssi-navFadeIn');\r\n                    })\r\n                }\r\n\r\n                content.push(imgButtons);\r\n\r\n            }\r\n            content.push($img);\r\n            $content.append(content);\r\n        }\r\n\r\n        function AspectRatio(srcWidth, srcHeight, maxWidth, maxHeight) {//find the aspect ration\r\n            var ratio = Math.min(maxWidth / srcWidth, maxHeight / srcHeight);\r\n            return {width: srcWidth * ratio, height: srcHeight * ratio};\r\n        }\r\n\r\n        function onHasSize(width, height) {\r\n            clearInterval(interval);\r\n            var naturalWidth = width || (supportsNatural ? $img[0].naturalWidth : $img.width());\r\n            var naturalHeight = height || (supportsNatural ? $img[0].naturalHeight : $img.height());\r\n\r\n            var imgHeight = imgBox.setModalHeight(120, true);\r\n            if ((naturalHeight > windowHeight - imgHeight || naturalWidth > windowWidth) && imgBox.options.fixedHeight === true) {\r\n                var dimensions = AspectRatio(naturalWidth, naturalHeight, windowWidth - 100, windowHeight - imgHeight);\r\n                naturalWidth = dimensions.width;\r\n                naturalHeight = dimensions.height;\r\n                if (i > 2) {\r\n                    $modalWrapper.addClass('ssi-overHeight')\r\n                }\r\n            }\r\n            $content.css('height', naturalHeight);\r\n            if (imgBox.options.center) {\r\n                $content.parent().css({'width': naturalWidth, 'height': naturalHeight});\r\n            }\r\n            $modalWrapper.css('width', naturalWidth);\r\n            placeImg();\r\n\r\n            $modalWrapper.addClass('ssi-imgBorder')\r\n\r\n        }\r\n\r\n        /**\r\n         * Initialize the arrows of navigation.\r\n         * @param {Ssi_modal}modalObj\r\n         * @returns {*|HTMLElement}\r\n         */\r\n\r\n        /**\r\n         * checks when the image's size is available\r\n         */\r\n        function checkSize() {\r\n            if (supportsNatural) {\r\n                if ($img[0].naturalWidth > 0) {\r\n                    onHasSize();\r\n                    return;\r\n                }\r\n            } else {\r\n                clearInterval(interval);\r\n                if ($img.width() > 50) {\r\n                    onHasSize();\r\n                    return;\r\n                }\r\n            }\r\n            startInterval = true;\r\n        }\r\n\r\n    }\r\n\r\n//-----------------------------End of imgBox plugin------------------------------------------------------------------\r\n\r\n//--------------------------------Start of notify plugin--------------------------------------------------\r\n    ssi_modal.notify = function (type, options, callback) {\r\n        var defaults = {\r\n            closeIcon: false,\r\n            overrideOther: false,\r\n            sizeClass: 'dialog',\r\n            onClickClose: true,\r\n            bodyScroll: true,\r\n            animation: true,\r\n            className: '',\r\n            backdrop: false,\r\n            outSideClose: false,\r\n            position: 'right top',\r\n            topZIndex: true,\r\n            okBtn: {\r\n                className: '',\r\n                label: 'Ok'\r\n            },\r\n            cancelBtn: {\r\n                className: '',\r\n                label: 'Cancel'\r\n            },\r\n            stack: true,\r\n            closeAfter: {\r\n                time: 4,\r\n                resetOnHover: true\r\n            }\r\n        };\r\n        if (type === 'confirm' || 'dialog') {\r\n            options.okBtn = $.extend({}, defaults.okBtn, options.okBtn);\r\n            options.cancelBtn = $.extend({}, defaults.cancelBtn, options.cancelBtn);\r\n        }\r\n\r\n        var generateIcon = function (className) {\r\n            if (className === '')return '';\r\n            return '<span class=\"ssi-icon ' + className + '\"></span>'\r\n        };\r\n\r\n        var icon = '', title = '';\r\n        switch (type) {\r\n            case 'success':\r\n                defaults.className = ' ssi-success';\r\n                break;\r\n            case 'error':\r\n                defaults.className = ' ssi-error';\r\n                break;\r\n            case 'info':\r\n                defaults.className = ' ssi-info';\r\n                break;\r\n            case 'warning':\r\n                defaults.className = ' ssi-warning';\r\n                break;\r\n            case 'confirm':\r\n                defaults.closeAfter = false;\r\n                defaults.onClickClose = false;\r\n                defaults.outSideClose = false;\r\n                defaults.icon = false;\r\n                defaults.title = false;\r\n\r\n                defaults.buttons = [{\r\n                    className: options.okBtn.className,\r\n                    label: options.okBtn.label,\r\n                    closeAfter: true,\r\n                    method: function () {\r\n                        if (typeof callback === 'function') {\r\n                            callback(true);\r\n                        }\r\n                    }\r\n                }, {\r\n                    className: options.cancelBtn.className,\r\n                    label: options.cancelBtn.label,\r\n                    closeAfter: true,\r\n                    method: function () {\r\n                        if (typeof callback === 'function') {\r\n                            callback(false);\r\n                        }\r\n                    }\r\n                }];\r\n                break;\r\n            case 'dialog':\r\n                defaults.onClickClose = false;\r\n                defaults.closeAfter = false;\r\n                defaults.outSideClose = false;\r\n                defaults.title = false;\r\n                defaults.icon = false;\r\n                defaults.buttons = [{\r\n                    className: options.okBtn.className,\r\n                    label: options.okBtn.label,\r\n                    closeAfter: true,\r\n                    method: callback\r\n                }];\r\n                break;\r\n            default:\r\n                defaults.className = type;\r\n        }\r\n        if (options.className) {\r\n            options.className += defaults.className || '';\r\n        }\r\n        options = $.extend(true, defaults, options);\r\n\r\n        if (options.icon != false) {\r\n            icon = options.icon || type || '';\r\n        }\r\n        if (options.title != false) {\r\n            title = options.title || type;\r\n        }\r\n        if ((options.icon != false && options.title != false) && icon != '') {\r\n            options.title = generateIcon(icon) + ' ' + title;\r\n        }\r\n        if (options.backdrop === true) {\r\n            options.backdrop = 'byKindShared'\r\n        }\r\n        options.keepContent = false;\r\n        if (options.overrideOther) {\r\n            var classes = options.position.split(' ');\r\n            $('body').find('div.' + classes[0] + '.' + classes[1]).children().empty()\r\n        }\r\n\r\n        return ssi_modal.createObject(options)\r\n         .setPluginName('notify').init().show();\r\n    };\r\n//--------------------------------End of notify plugin--------------------------------------------------\r\n\r\n//--------------------------------Start of jquery selector plugin--------------------------------------------------\r\n\r\n    $.fn.ssi_modal = function () {\r\n        var opts;\r\n        if (typeof arguments[1] === 'object') {\r\n            var action = arguments[0];\r\n            opts = arguments[1] || {};\r\n            var callback = arguments[2];\r\n        } else {\r\n            opts = arguments[0] || {};\r\n        }\r\n        return this.each(function () {\r\n            var element = $(this), options;\r\n            if (opts.content) {//that means that we will not use any div element for content\r\n                element.click(function () {\r\n                    switch (action) {//action could be show,dialog or confirm\r\n                        case 'show':\r\n                            ssi_modal['show'](opts, element);\r\n                            break;\r\n                        default:\r\n                            ssi_modal[action](opts, callback);\r\n                    }\r\n                })\r\n            } else {\r\n                var content, def, dataAttr = element.attr('data-ssi_modal');\r\n                if (dataAttr) {// that means the content is an element.  data-ssi_modal shows the elements selector\r\n                    element.click(function () {//set click event\r\n                        content = $(dataAttr);\r\n                        def = {\r\n                            content: content\r\n                        };\r\n                        options = $.extend({}, opts, def);\r\n                        ssi_modal.createObject(options).init().show();\r\n                    });\r\n                } else {//that means the target is the element that contains the content\r\n                    def = {\r\n                        content: element\r\n                    };\r\n                    options = $.extend({}, opts, def);\r\n                    ssi_modal.createObject(options).init().show();\r\n                }\r\n            }\r\n        });\r\n    };\r\n//--------------------------------End of jquery selector plugin--------------------------------------------------\r\n\r\n    /**\r\n     * Adds animation to an element\r\n     * @method addAnimation\r\n     * @param {string} animationName\r\n     * @param {function} callback\r\n     * @return CallExpression\r\n     */\r\n\r\n//@author https://developer.mozilla.org/en-US/docs/Web/CSS/CSS_Animations/Detecting_CSS_animation_support\r\n    function checkAnimationSupport() {\r\n        var animation = false,\r\n         animationstring = 'animation',\r\n         keyframeprefix = '',\r\n         domPrefixes = 'Webkit Moz O ms Khtml'.split(' '),\r\n         pfx = '',\r\n         elm = document.createElement('div');\r\n\r\n        if (elm.style.animationName !== undefined) {\r\n            animation = true;\r\n        }\r\n\r\n        if (animation === false) {\r\n            for (var i = 0; i < domPrefixes.length; i++) {\r\n                if (elm.style[domPrefixes[i] + 'AnimationName'] !== undefined) {\r\n                    pfx = domPrefixes[i];\r\n                    animationstring = pfx + 'Animation';\r\n                    keyframeprefix = '-' + pfx.toLowerCase() + '-';\r\n                    animation = true;\r\n                    break;\r\n                }\r\n            }\r\n        }\r\n        return animation;\r\n    }\r\n\r\n    $.fn.addAnimation = function (animationName, callback) {\r\n        var animationEnd = 'mozAnimationEnd webkitAnimationEnd  MSAnimationEnd oanimationend animationend';\r\n        if (animationName.indexOf('ssi-fade') !== -1 && animationSupport === false) {\r\n            return $(this)[animationName.replace('anim ssi-', '')](300, function () {\r\n                if (typeof callback === 'function') {\r\n                    callback();\r\n                }\r\n            });\r\n        } else {\r\n            $(this).addClass(animationName).one(animationEnd, function () {\r\n                $(this).removeClass(animationName);\r\n                if (typeof callback === 'function') {\r\n                    callback();\r\n                }\r\n            });\r\n\r\n            if (animationName === 'ssi-show' || animationName === 'ssi-hidden' || animationName === '') {\r\n                $(this).trigger('animationend');\r\n            }\r\n            return this.each(function () {\r\n                $(this)\r\n            })\r\n        }\r\n    };\r\n\r\n    function toArray(value) {//if the value is not array returns an array with the value\r\n        if (!(value instanceof Array)) {\r\n            value = [value];\r\n        }\r\n        return value;\r\n    }\r\n    return ssi_modal;\r\n\r\n}));"],"file":"ssi-modal.min.js"}